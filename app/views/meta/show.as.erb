package com.westrick.sva.tables
{
	import com.westrick.restx.TableGrid;
	import com.westrick.restx.TableSelector;
	
	
	import flash.events.Event;
	import flash.events.EventDispatcher;
	import flash.events.IEventDispatcher;
	import flash.events.MouseEvent;
	import flash.net.URLLoader;
	import flash.net.URLRequest;
	import flash.net.URLRequestHeader;
	import flash.net.URLRequestMethod;
	import flash.utils.Dictionary;
	import flash.utils.getDefinitionByName;
	
	import mx.collections.ArrayList;
	import mx.containers.TitleWindow;
	import mx.core.ClassFactory;
	import mx.managers.PopUpManager;
	
	import spark.components.Application;
	import spark.components.Button;
	import spark.components.CheckBox;
	import spark.components.DataGrid;
	import spark.components.Form;
	import spark.components.FormItem;
	import spark.components.HGroup;
	import spark.components.TextInput;
	import spark.components.gridClasses.ComboBoxGridItemEditor;
	import spark.components.gridClasses.GridColumn;
	
	
	
	public class <%= @tablename %> 
	{
		// Class Variables
		// Class Variables
		static public  var BASEURL:String;
		static private var ldr_getAll:URLLoader = new URLLoader();
		static public  var RestXName:String   = '<%= @routename.downcase %>'; 
		static public  function UrlGetAll():String { return BASEURL + '/' + RestXName + '.json';}
		static public  function UrlUpdate():String { return BASEURL + '/' + RestXName + '/';}
		static public  function UrlAdd():String    { return BASEURL + '/' + RestXName;}
		

		[Bindable]
		static public var Instances:Object = new Object();
		
		[Bindable]
		static public var Rows:ArrayList = new ArrayList();
		
		static public function Load(baseurl:String):void 
		{
			BASEURL = baseurl;
			ldr_getAll.addEventListener(Event.COMPLETE , ldr_getAll_complete );
			ldr_getAll.load(new URLRequest(UrlGetAll()));
		}
		
		static private function ldr_getAll_complete(e:Event):void 
		{
			var rows:Array = JSON.parse(e.currentTarget.data) as Array;
			Rows.removeAll();
			for each (var r:Object in rows) 
			{
				var c:<%= @tablename %>;
				var pkey:String = r[Meta[PrimaryKey()]]; 
				if ( pkey in Instances) 
				{ 
					c = Instances[pkey];
					c.update(r);
				} else {
					c = new <%= @tablename %>(r);	
				}
			}
		}
		
		public static function MakeDateFromJson(ds:String):Date 
		{
			if (ds == null) return null ;
			var datestring:String = ds.replace(/-/g,"/");
			datestring = datestring.replace("T", " ");
			datestring = datestring.replace("Z", " GMT");
			var n:Number = Date.parse(datestring);
			var date:Date = new Date(n);
			return date;
		}
		
		private static function onUpdateComplete(e:Event):void
		{
			// Values where stored in database...
			trace("<%= @tablename %> update Complete");
			// var loader:URLLoader = URLLoader(e.target);
			// if (loader.data == '') return;
		}
		
		private static function onDeleteComplete(e:Event):void
		{
			// Values where stored in database...
			trace("<%= @tablename %> Delete Complete");
			// var loader:URLLoader = URLLoader(e.target);
			// if (loader.data == '') return;
		}
		
		private static var twAddPopUp:TitleWindow;
		public  static var AddObject:Object;
		
		public static function addPopUp(grid:DataGrid):void
		{
			AddObject = new Object();
			twAddPopUp= PopUpManager.createPopUp(grid, TitleWindow, false) as TitleWindow;
			twAddPopUp.title = 'New <%= @tablename %>';
			var form:Form = new Form();
			var colarray:Array = new Array();
			for each (var fld:Object in Meta.Fields) {
				if (fld['col']) {
					colarray[fld.cno - 1] = fld;
				}
			}
			
			// Okay now for each field in colno order....
			for each (fld in colarray) {
				if (fld.edit == 'true') {
					var item:FormItem = new FormItem();
					item.label = fld.col;
					var ti:TextInput = new TextInput();
					ti.prompt = fld.col;
					ti.addEventListener(Event.CHANGE,PopUpValueChange);
					item.addElement(ti);
					form.addElement(item);
				}
			}
			twAddPopUp.addElement(form);
			var hg:HGroup = new HGroup();
			hg.verticalAlign = 'middle';
			hg.horizontalAlign = 'center';
			hg.percentWidth=100;
			
			var s:Button = new Button();
			s.label = 'Save';
			s.addEventListener(MouseEvent.CLICK,handleSaveClick);
			hg.addElement(s);
			
			var c:Button = new Button();
			c.label = 'Cancel';
			c.addEventListener(MouseEvent.CLICK,handleCancelClick);
			hg.addElement(c);
			
			twAddPopUp.addElement(hg);
			PopUpManager.centerPopUp(twAddPopUp);
			
		}
		
		public static function PopUpValueChange(e:Event):void 
		{
			var fname:String = e.currentTarget.accessibilityName;
			var value:String = e.currentTarget.text;
			AddObject[fname]=e.currentTarget.text;

			trace('Changed '+fname+' to '+value);
		}
		
		public static function handleSaveClick(e:MouseEvent):void 
		{
			
			PopUpManager.removePopUp(twAddPopUp);
			twAddPopUp = null;
			Add(AddObject);
			//trace ('Save:',AddObject);
		}
		
		
		public static function handleCancelClick(e:MouseEvent):void 
		{
			PopUpManager.removePopUp(twAddPopUp);
			twAddPopUp = null;
		}
		
		public static function Add(values:Object):void
		{
			var loader:URLLoader = new URLLoader();
			var req:URLRequest = new URLRequest();
			req.url = UrlAdd() + '.json';
			loader.addEventListener(Event.COMPLETE, onAddComplete);
			
			
			req.data = JSON.stringify({"<%= @tablename.downcase %>":values});
			
			req.method = URLRequestMethod.POST;															
			//req.requestHeaders.push(new URLRequestHeader("X-HTTP-Method-Override", URLRequestMethod.PUT));															
			req.requestHeaders.push(new URLRequestHeader("Content-type", 'application/json'));															
			loader.load(req);
		}
		
		public static function onAddComplete(e:Event):void
		{
			trace("add <%= @tablename %> Complete");
			var result:Object = JSON.parse(e.currentTarget.data) ;
			new <%= @tablename %>(result);
		}
		
		
		public static function GetDataGridColumns():ArrayList { return MakeGridColumns(Meta.Fields); };
		public static function MakeGridColumns (flds:Object):ArrayList
		{
			var cols:ArrayList = new ArrayList();
			var col:GridColumn;
			var fld:Object;
			var fldname:String;
			var cno:int;
			var c:ClassFactory;
			
			// build an array of flds in column order....
			var colarray:Array = new Array();
			for (fldname in flds) {
				fld = flds[fldname];
				if (fld['col']) {
					colarray[fld.cno - 1] = fld;
				}
			}
			
			// Okay now for each field in colno order....
			for each (fld in colarray) {
				if (fld['col']) {
					col = new GridColumn();
					col.headerText = fld.col_name;
					col.dataField  = fld.name;
					col.editable   = (fld.edit == 'true');
					cols.addItem(col);
					if (fld.referenced_class) {
						var cls:Object		= getDefinitionByName('com.westrick.sva.tables.' + fld.referenced_class);  
						col.labelFunction 	= cls.LabelFunction;
						col.itemEditor 		= cls.ProductSelector();
					}
				}
			}			
			return cols;
		} 
		
		// Meta Information 
		static public var Meta:Object =
			{"Fields":

	<%	pkey = ''
		display = ''
		d1 = '{'
		@meta.keys.each do  |cname| 
		col = @meta[cname] 
		pkey = cname if (col['primary'] == true) 
		display = cname if (col['display'] == '#') %>
		<%= d1 %>"<%= col['name'] %>":
			<%  d1 = ','
			    delim = '{'
				col.keys.each() do |k| %>
					<%= delim %>'<%= k %>':'<%= col[k] %>'
			<% 		delim = ',' 
			   end %>
		                }
	<% end %>
		}
		,"Name": "<%= @tablename %>"
		,"PrimaryKey" : "<%= pkey %>"
		};
		
		static public function PrimaryKey():String
		{
			return "<%= pkey %>";
		}

		static public function ProductSelector():ClassFactory
		{
			var productRenderer:ClassFactory = new ClassFactory(TableSelector);
			productRenderer.properties = { dataProvider: Rows, labelField: '<%= display %>', pkey: PrimaryKey() };
			return productRenderer;
		}
		
		static public function LabelFunction(item:Object, column:GridColumn):String
		{
			var id:int = item[column.dataField];
			var lbl:String = '';
			if (id in Instances) {
				lbl = Instances[id].<%= display %>;
			}
			return lbl;			
		}
		
		
		private var mdtlist:Array = new Array();
		
		// Instance variables
	<%	pkey = ''
		@meta.keys.each do  |cname| 
		col = @meta[cname] 
		pkey = cname if (col['primary'] == true)
		%>
		public var _<%= col['name'] %>:<%= col['asType'] %>;
	<% end %>
		
		// Getters
	<%	@meta.keys.each do  |cname| 
		col = @meta[cname] 
		%>
		public function get <%= col['name'] %>():<%= col['asType'] %> { return _<%= col['name'] %>;};
	<% end %>
		
		// Setters
	<%	@meta.keys.each do  |cname| 
		col = @meta[cname] 
		%>
		public function set <%= col['name'] %>(value:<%= col['asType'] %>):void { changeField('<%= col['name'] %>',value);};
	<% end %>
		
		public function <%= @tablename %>(values:Object)
		{
			for (var k:String in values) 
			{
				var i:String = '_' + k;
				if (Meta['Fields'][k]['asType'] == 'Date')
				{
					this[i] = MakeDateFromJson(values[k])
				} else {
					this[i] = values[k];	
				}				
			};
			Instances[this.primaryKeyValue()] = this;
			Rows.addItem(this);
		}
		
		public function changeField(name:String, value:*):void 
		{
			var internal_name:String = '_' + name; 
			if (this[internal_name] != value) {
				this[internal_name] = value;
				this.mdtlist.push(name);
			}
		}
		
		public function primaryKeyValue():Object
		{
			return <%= pkey %>;
		}
		
		public function update(r:Object):void 
		{
			for (var k:String in r) 
			{
				if (this[k] != r[k]) {
					Rows.itemUpdated(this,k,this[k],r[k]);
					mdtlist.push(k);
					this[k] = r[k];
				}
			};
		}		
		
		public function is_modified():Boolean
		{
			return (mdtlist.length != 0);
		}
		
		private function build_update_message():String {
			var obj:Object = new Object();
			obj[PrimaryKey()] = primaryKeyValue();
			while (mdtlist.length > 0) {
				var fn:String = mdtlist.pop();
				obj[fn] = this[fn];
			}
			return JSON.stringify({"<%= @tablename.downcase %>":obj});
		}
		
		public function save():void 
		{
			if (mdtlist.length < 1) return ;
			
			var loader:URLLoader = new URLLoader();
			var req:URLRequest = new URLRequest();
			req.url = UrlUpdate() + primaryKeyValue() + '.json';
			loader.addEventListener(Event.COMPLETE, onUpdateComplete);
			
			
			req.data = build_update_message();
			
			req.method = URLRequestMethod.POST;															
			req.requestHeaders.push(new URLRequestHeader("X-HTTP-Method-Override", URLRequestMethod.PUT));															
			req.requestHeaders.push(new URLRequestHeader("Content-type", 'application/json'));															
			loader.load(req);
		}
		
		public function del():void 
		{
			var loader:URLLoader = new URLLoader();
			var req:URLRequest = new URLRequest();
			req.url = UrlUpdate() + primaryKeyValue() + '.json';
			loader.addEventListener(Event.COMPLETE, onDeleteComplete);
			
			
			req.data = "dummy data";
			
			req.method = URLRequestMethod.POST;															
			req.requestHeaders.push(new URLRequestHeader("X-HTTP-Method-Override", URLRequestMethod.DELETE));															
			loader.load(req);
			
			// Delete Item from Storages....
			delete Instances[primaryKeyValue()];
			Rows.removeItem(this);
		}
		
		private function NonMutableField(fname:String):void {
			throw ("E-NonMutableField, Attempt to modify "+fname+" which is not mutable");
		}
		
		public function toString():String
		{
			return '<%= @tablename %>('+primaryKeyValue().to_string()+')'
		}
	}
}


